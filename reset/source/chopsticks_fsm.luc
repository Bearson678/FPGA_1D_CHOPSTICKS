// barebones of a fsm, if you are doing timer stuff feel free to edit the increase a bit, Im not sure what i should add to make it work :(
// This is the main file you will be editing for testing FSM modules
module chopsticks_fsm (
    input clk,  // clock
    input rst,  // reset
    input decrease_timer,
    input regfile_rd2[32],
    input p1l_button,
    input p1r_button,
    input p2r_button,
    input p2l_button,
    input p1split,
    input p2split,
    
    output alufn[6],
    output asel[2],
    output bsel[2],
    output wdsel[2],
    output regfile_wa[4],
    output regfile_ra1[4],
    output regfile_ra2[4],
    output regfile_we,
    output debug[4]
) {
    //use this to list the states you are testing for your module
    enum ChopSticksStates{
        //IMPLEMENTING RESET BEFORE THE NEXT TURN
        
        
        RESET_START, // for testing purposes, to remove and connect previous state to next state
        
        // reset of all temp regs
        RESET_TEMP4,
        RESET_TEMP3,
        RESET_TEMP2,
        RESET_TEMP1,
        
        // change turn
        RESET_TURNSELECT,
        
        RESET_END // for testing purposes, to remove and connect to next state 
       
    }
    
    // stores the states in a dff
    .clk(clk){
        .rst(rst){
    dff chopsticks_fsm[$width(ChopSticksStates)](#INIT(ChopSticksStates.RESET_START))
        }
    }
    always {
        //default control signal setings
        alufn = 0
        asel = 0
        bsel = 0
        wdsel = 0
        regfile_wa = d9
        regfile_we = 0
        regfile_ra1 = d0
        regfile_ra2 = d0
        debug = b0000
        
        chopsticks_fsm.d = chopsticks_fsm.q
        if(rst){
            chopsticks_fsm.d = ChopSticksStates.RESET_START
        }
        else{
            //this is where you start coding out your states
            case(chopsticks_fsm.q){
                ChopSticksStates.RESET_START: // when split button is pressed (temp for testing, to be removed when connecting)
                    if(p1split){
                        chopsticks_fsm.d = ChopSticksStates.RESET_TEMP4
                        }
                
                ChopSticksStates.RESET_TEMP4: // write 0 to temp4
                    alufn = b011100 //"B"
                    bsel = b01
                    regfile_we = b1
                    regfile_wa = b1100
                    wdsel = b00
                    chopsticks_fsm.d = ChopSticksStates.RESET_TEMP3
                    
                ChopSticksStates.RESET_TEMP3: // write 0 to temp3
                    alufn = b011100 //"B"
                    bsel = b01
                    regfile_we = b1
                    regfile_wa = b1011
                    wdsel = b00
                    chopsticks_fsm.d = ChopSticksStates.RESET_TEMP2
                
                ChopSticksStates.RESET_TEMP2: // write 0 to temp2
                    alufn = b011100 //"B"
                    bsel = b01
                    regfile_we = b1
                    regfile_wa = b1010
                    wdsel = b00
                    chopsticks_fsm.d = ChopSticksStates.RESET_TEMP1
                    
                ChopSticksStates.RESET_TEMP1: // write 0 to temp1
                    alufn = b011100 //"B"
                    bsel = b01
                    regfile_we = b1
                    regfile_wa = b1001
                    wdsel = b00
                    chopsticks_fsm.d = ChopSticksStates.RESET_TURNSELECT
                
                ChopSticksStates.RESET_TURNSELECT: // change player turn
                    alufn = b010110 //"XOR" 
                    asel = b00
                    bsel = b10
                    regfile_ra1 = b1101
                    regfile_we = b1
                    regfile_wa = b1101
                    wdsel = b00
                    chopsticks_fsm.d = ChopSticksStates.RESET_END 
                    
                ChopSticksStates.RESET_END: // to remove and connect to option select 
                    chopsticks_fsm.d = ChopSticksStates.RESET_END 
                
                                                
            }
        }
        
    }
}



























































































