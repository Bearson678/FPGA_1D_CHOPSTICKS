// barebones of a fsm, if you are doing timer stuff feel free to edit it a bit, Im not sure what i should add to make it work :(
module chopsticks_fsm (
    input clk,  // clock
    input rst,  // reset
    input increase_timer,
    input regfile_rd2[32],
    input p1l_button,
    input p1r_button,
    input p2r_button,
    input p2l_button,
    input p1split,
    input p2split,
    
    output alufn[6],
    output asel[2],
    output bsel[2],
    output wdsel[2],
    output regfile_wa[4],
    output regfile_ra1[4],
    output regfile_ra2[4],
    output regfile_we,
    output debug[4]
) {
    //use this to list the states you are testing for your module
    enum ChopSticksStates{
        START,
        STATE1,
        STATE2,
        END
    
    }
    const CLK_FREQ = $is_sim() ? 1000 : 10000000
    // stores the states in a dff
    .clk(clk){
        edge_detector player_button_edge[6](#RISE(6x{{1}}),#FALL(6x{{0}}))
        button_conditioner player_button_cond [6](#CLK_FREQ(6x{{CLK_FREQ}}))
        .rst(rst){
    dff game_fsm[$width(ChopSticksStates)](#INIT(ChopSticksStates.START))
        }
    }
    always {
        //default control signal setings
        alufn = 0
        asel = 0
        bsel = 0
        wdsel = 0
        regfile_wa = d9
        regfile_we = 0
        regfile_ra1 = d0
        regfile_ra2 = d0
        debug = b0000
        
        player_button_cond.in[0] = p1l_button
        player_button_cond.in[1] = p1r_button
        player_button_cond.in[2] = p1split
        player_button_cond.in[3] = p2l_button
        player_button_cond.in[4] = p2r_button
        player_button_cond.in[5] = p2split
        
        player_button_edge.in = player_button_cond.out
        
        game_fsm.d = game_fsm.q
        if(rst){
            game_fsm.d = ChopSticksStates.START
        }
        else{
            //this is where you start coding out your states
            case(game_fsm.q){
                default: 
                    game_fsm.d = ChopSticksStates.START
            }
        }
        
    }
}



























































































