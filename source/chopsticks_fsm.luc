// barebones of a fsm, if you are doing timer stuff feel free to edit the increase a bit, Im not sure what i should add to make it work :(
// This is the main file you will be editing for testing FSM modules
module chopsticks_fsm (
    input clk,  // clock
    input rst,  // reset
    input decrease_timer,
    input regfile_rd2[32],
    input p1l_button,
    input p1r_button,
    input p2r_button,
    input p2l_button,
    input p1split,
    input p2split,
    
    output alufn[6],
    output asel[2],
    output bsel[2],
    output wdsel[2],
    output regfile_wa[4],
    output regfile_ra1[4],
    output regfile_ra2[4],
    output regfile_we,
    output debug[4]

) {
    //use this to list the states you are testing for your module
    opp_attack opp_attack_p1(#OWNLSADDR(0), #OWNRSADDR(1), #OWNLAADDR(4), #OWNRAADDR(5), #OPPLSADDR(2), 
        #OPPRSADDR(3), #OPPLAADDR(6), #OPPRAADDR(7), .clk(clk), .rst(rst), .regfile_rd2(regfile_rd2))
    opp_attack opp_attack_p2(#OWNLSADDR(2), #OWNRSADDR(3), #OWNLAADDR(6), #OWNRAADDR(7), #OPPLSADDR(0), 
        #OPPRSADDR(1), #OPPLAADDR(4), #OPPRAADDR(5), .clk(clk), .rst(rst), .regfile_rd2(regfile_rd2))
    self_attack self_attack_p1(#OWNLSADDR(0), #OWNRSADDR(1), #OWNLAADDR(4), #OWNRAADDR(5), 
        .clk(clk), .rst(rst), .regfile_rd2(regfile_rd2))
    self_attack self_attack_p2(#OWNLSADDR(0), #OWNRSADDR(1), #OWNLAADDR(4), #OWNRAADDR(5), 
        .clk(clk), .rst(rst), .regfile_rd2(regfile_rd2))
    split split_p1(#OWNLSADDR(0), #OWNRSADDR(1), #OWNLAADDR(4), #OWNRAADDR(5), 
        .clk(clk), .rst(rst), .regfile_rd2(regfile_rd2))
    split split_p2(#OWNLSADDR(0), #OWNRSADDR(1), #OWNLAADDR(4), #OWNRAADDR(5), 
        .clk(clk), .rst(rst), .regfile_rd2(regfile_rd2))
    
    enum MainStates{
        //IMPLEMENTING THE TIMER MODULE
        IDLE, 
      
        OPTION_SELECT, 
        
        // attack others
        SELECT_OPP_HAND,
        SELECT_OWN_HAND,
        CALCULATE_ATTACK_OTHERS,
        
        
        // attack self
        SELECT_TO_HIT,
        CALCULATE_ATTACK_SELF,
        
        // split
        SPLIT,
        
        CURR_WIN,
        
        CHECK_ILLEGAL,
        
        OPP_WIN, 
        
        CONTINUE, // to reset all 
        
        TURN_SELECT,
        
        BLACKOUT
        
    
    }
    
    // stores the states in a dff
    .clk(clk){
        .rst(rst){
    dff game_fsm[$width(MainStates)](#INIT(MainStates.IDLE))
        }
    }
    always {
        //default control signal setings
        alufn = 0
        asel = 0
        bsel = 0
        wdsel = 0
        regfile_wa = 0
        regfile_we = 0
        regfile_ra1 = d0
        regfile_ra2 = d0
        debug = b0000
        
        // to dictate when to run modules 
        opp_attack_p1.start_oppatk = b0
        opp_attack_p2.start_oppatk = b0
        self_attack_p1.start_selfatk = b0
        self_attack_p2.start_selfatk = b0
        split_p1.start_split = b0
        split_p2.start_split = b0
       
        
        game_fsm.d = game_fsm.q
        if(rst){
            game_fsm.d = MainStates.IDLE
        }
        else{
            //this is where you start coding out your states
              case(game_fsm.q){
                MainStates.IDLE:
                if(p1r_button){ // TO CHANGE TO START BUTTON
                                         
                game_fsm.d = MainStates.OPTION_SELECT // to be changed
                    }
                
                MainStates.OPTION_SELECT: 
                regfile_ra2 = d13
                if(regfile_rd2[0]){ // player 2 turn
                    if (p2l_button){ // attack other
                            game_fsm.d = MainStates.SELECT_OPP_HAND 
                        }
                    else if (p2r_button){ // attack self
                            game_fsm.d = MainStates.SELECT_TO_HIT 
                        }
                    else if (p2split){ // split
                            game_fsm.d = MainStates.SPLIT 
                        }
                    
                    }
                else { // player 1 turn
                    if (p1l_button){ // attack other
                            game_fsm.d = MainStates.SELECT_OPP_HAND 
                        }
                    else if (p1r_button){ // attack self
                            game_fsm.d = MainStates.SELECT_TO_HIT 
                        }
                    else if (p1split){ // split
                            game_fsm.d = MainStates.SPLIT 
                        }
                    } 
                     
                
                
                
                MainStates.SELECT_OPP_HAND: // attack opp - select opp hand
                regfile_ra2 = d13
                if(regfile_rd2[0]){ // player 2 turn
                    if (p2l_button){ // attack opp left
                            
                            // store 0 to temp 1
                            alufn = b011100 //"B"
                            bsel = b01
                            regfile_we = b1
                            regfile_wa = d9 // temp 1
                            wdsel = b00
                            
                            game_fsm.d = MainStates.SELECT_OWN_HAND 
                        }
                    else if (p2r_button){ // attack opp right
                            
                            // store 1 to temp 1
                            alufn = b011100 //"B"
                            bsel = b10
                            regfile_we = b1
                            regfile_wa = d9 // temp 1
                            wdsel = b00
                            
                            game_fsm.d = MainStates.SELECT_OWN_HAND 
                        }                  
                    }
                    
                else { // player 1 turn
                    if (p1l_button){ // // attack opp left
                            
                            // store 0 to temp 1
                            alufn = b011100 //"B"
                            bsel = b01
                            regfile_we = b1
                            regfile_wa = d9 // temp 1
                            wdsel = b00
                            
                            game_fsm.d = MainStates.SELECT_OWN_HAND 
                        }
                    else if (p1r_button){ // attack opp right
                            
                            // store 1 to temp 1
                            alufn = b011100 //"B"
                            bsel = b10
                            regfile_we = b1
                            regfile_wa = d9 // temp 1
                            wdsel = b00
                            
                            game_fsm.d = MainStates.SELECT_OWN_HAND 
                        }
                    }
                
                MainStates.SELECT_OWN_HAND: // attack opp - select own hand
                regfile_ra2 = d13
                if(regfile_rd2[0]){ // player 2 turn
                    if (p2l_button){ // attack with left
                            
                            // store 0 to temp 1
                            alufn = b011100 //"B"
                            bsel = b01
                            regfile_we = b1
                            regfile_wa = d10 // temp 2
                            wdsel = b00
                            
                            game_fsm.d = MainStates.CALCULATE_ATTACK_OTHERS
                        }
                    else if (p2r_button){ // attack with right
                            
                            // store 1 to temp 1
                            alufn = b011100 //"B"
                            bsel = b10
                            regfile_we = b1
                            regfile_wa = d10 // temp 2
                            wdsel = b00
                            
                            game_fsm.d = MainStates.CALCULATE_ATTACK_OTHERS 
                        }                  
                    }
                    
                else { // player 1 turn
                    if (p1l_button){ // attack with left
                            
                            // store 0 to temp 1
                            alufn = b011100 //"B"
                            bsel = b01
                            regfile_we = b1
                            regfile_wa = d10 // temp 2
                            wdsel = b00
                            
                            game_fsm.d = MainStates.CALCULATE_ATTACK_OTHERS 
                        }
                    else if (p1r_button){ // attack with right
                            
                            // store 1 to temp 1
                            alufn = b011100 //"B"
                            bsel = b10
                            regfile_we = b1
                            regfile_wa = d10 // temp 2
                            wdsel = b00
                            
                            game_fsm.d = MainStates.CALCULATE_ATTACK_OTHERS
                        }
                    }
                    
                
                
                MainStates.CALCULATE_ATTACK_OTHERS: // may cause erronous output if main clock now slow enoguh
                // use seperate module to check validity of attack others+ update hand values
                
                regfile_ra2 = d13
                if (regfile_rd2[0]){ // player 2 turn
                    opp_attack_p2.start_oppatk = b1
                    if (opp_attack_p2.end){
                        game_fsm.d = MainStates.CURR_WIN
                        }
                    else{
                        game_fsm.d = MainStates.CHECK_ILLEGAL
                        }
                    }
                    
                else {
                        opp_attack_p1.start_oppatk = b1
                    if (opp_attack_p1.end){
                        game_fsm.d = MainStates.CURR_WIN
                        }
                    else{
                        game_fsm.d = MainStates.CHECK_ILLEGAL
                        }  
                    
                    }

                    
                
                MainStates.SELECT_TO_HIT: // attack self - use separate module to determine branch + update temp1 if needed
                regfile_ra2 = d13
                if(regfile_rd2[0]){ // player 2 turn
                    if (p2l_button){ // attack self left
                            
                            // store 0 to temp 1
                            alufn = b011100 //"B"
                            bsel = b01
                            regfile_we = b1
                            regfile_wa = d9 // temp 1
                            wdsel = b00
                            
                            game_fsm.d = MainStates.CALCULATE_ATTACK_SELF 
                        }
                    else if (p2r_button){ // attack self right
                            
                            // store 1 to temp 1
                            alufn = b011100 //"B"
                            bsel = b10
                            regfile_we = b1
                            regfile_wa = d9 // temp 1
                            wdsel = b00
                            
                            game_fsm.d = MainStates.CALCULATE_ATTACK_SELF  
                        }                  
                    }
                    
                else { // player 1 turn
                    if (p1l_button){ // // attack self left
                            
                            // store 0 to temp 1
                            alufn = b011100 //"B"
                            bsel = b01
                            regfile_we = b1
                            regfile_wa = d9 // temp 1
                            wdsel = b00
                            
                            game_fsm.d = MainStates.CALCULATE_ATTACK_SELF  
                        }
                    else if (p1r_button){ // attack self right
                            
                            // store 1 to temp 1
                            alufn = b011100 //"B"
                            bsel = b10
                            regfile_we = b1
                            regfile_wa = d9 // temp 1
                            wdsel = b00
                            
                            game_fsm.d = MainStates.CALCULATE_ATTACK_SELF  
                        }
                    }
                
                MainStates.CALCULATE_ATTACK_SELF:
                // use seperate module to check validity of attack self + update hand values
                    
                regfile_ra2 = d13
                if (regfile_rd2[0]){ // player 2 turn
                    self_attack_p2.start_selfatk = b1                   
                    }
                    
                else { // player 1 turn
                    self_attack_p1.start_selfatk = b1                     
                    }
                    
                game_fsm.d = MainStates.CHECK_ILLEGAL
                  
                MainStates.SPLIT:
                    // use seperate module to check validity of split + update hand values 
                    
                    regfile_ra2 = d13
                    if (regfile_rd2[0]){ // player 2 turn
                        split_p2.start_split = b1                   
                    }
                    
                    else { // player 1 turn
                        split_p1.start_split = b1                   
                    }
                    
                game_fsm.d = MainStates.CHECK_ILLEGAL
                
                MainStates.CHECK_ILLEGAL: // branch illegal regfile
                regfile_ra2 = d12
                if(regfile_rd2[0]){ // illegal
                        game_fsm.d = MainStates.OPP_WIN
                    }
                else{
                    game_fsm.d = MainStates.CONTINUE
                    }
                
                    
                MainStates.CONTINUE:
                    // module to reset temps
                    game_fsm.d = MainStates.TURN_SELECT
                
                MainStates.TURN_SELECT:
                    // swap currentplayer
                    alufn = b010110 //"XOR" 
                    asel = b00
                    bsel = b10
                    regfile_ra1 = d13
                    regfile_we = b1
                    regfile_wa = b1101
                    wdsel = b00
                    game_fsm.d = MainStates.OPTION_SELECT
                
                
                MainStates.CURR_WIN: // current player win by killing all of opp's hands
                    // module to light win/lose
                    game_fsm.d = MainStates.CURR_WIN // placeholder, should go back idle
                
                MainStates.OPP_WIN: // opp player win by curr player's illegal input
                    // module to light win/lose
                    game_fsm.d = MainStates.OPP_WIN // placeholder, should go back idle
                                              
                
            
        }
        
    }
}
}



























































































