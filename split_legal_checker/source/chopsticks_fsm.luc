// barebones of a fsm, if you are doing timer stuff feel free to edit the increase a bit, Im not sure what i should add to make it work :(
// This is the main file you will be editing for testing FSM modules
module chopsticks_fsm (
    input clk,  // clock
    input rst,  // reset
    input decrease_timer,
    input regfile_rd2[32],
    input p1l_button,
    input p1r_button,
    input p2r_button,
    input p2l_button,
    input p1split,
    input p2split,
    
    output alufn[6],
    output asel[2],
    output bsel[2],
    output wdsel[2],
    output regfile_wa[4],
    output regfile_ra1[4],
    output regfile_ra2[4],
    output regfile_we,
    output debug[4]
) {
    //use this to list the states you are testing for your module
    enum SplitStates{
        //IMPLEMENTING CHECK IF SPLIT IS LEGAL MODULE
        SPCHECK_START,
        SPCHECK_BRANCHPLAYER,
        // where the split module starts
        
        // player 1 turn
        SPCHECK_BRANCHP1LAVAIL,
        SPCHECK_EVALUATEHANDCOUNT1,
        SPCHECK_UPDATET2P1LS,
        SPCHECK_EVALUATEHANDCOUNT2,
        
        SPCHECK_BRANCHP1RAVAIL,
        SPCHECK_EVALUATEHANDCOUNT3,
        SPCHECK_UPDATET2P1RS,
        
        SPCHECK_BRANCHNOHANDS1,
        SPCHECK_CHECKHANDSCORE1,
        SPCHECK_BRANCHVALIDHANDS1,
        
        // player 2 turn
        SPCHECK_BRANCHP2LAVAIL,
        SPCHECK_EVALUATEHANDCOUNT4,
        SPCHECK_UPDATET2P2LS,
        SPCHECK_EVALUATEHANDCOUNT5,
        
        SPCHECK_BRANCHP2RAVAIL,
        SPCHECK_EVALUATEHANDCOUNT6,
        SPCHECK_UPDATET2P2RS,
        
        SPCHECK_BRANCHNOHANDS2,
        SPCHECK_CHECKHANDSCORE2,
        SPCHECK_BRANCHVALIDHANDS2,
        
        // to connect to next step
        SPCHECK_P1SPLITVALID,
        SPCHECK_P2SPLITVALID,
        SPCHECK_INVALID
       
    }
    
    // stores the states in a dff
    .clk(clk){
        .rst(rst){
    dff game_fsm[$width(SplitStates)](#INIT(SplitStates.SPCHECK_START))
        }
    }
    always {
        //default control signal setings
        alufn = 0
        asel = 0
        bsel = 0
        wdsel = 0
        regfile_wa = d9
        regfile_we = 0
        regfile_ra1 = d0
        regfile_ra2 = d0
        debug = b0000
        
        game_fsm.d = game_fsm.q
        if(rst){
            game_fsm.d = SplitStates.SPCHECK_START
        }
        else{
            //this is where you start coding out your states
            case(game_fsm.q){
                SplitStates.SPCHECK_START: // when split button is pressed
                    if(p1split){
                        game_fsm.d = SplitStates.SPCHECK_BRANCHPLAYER
                        }
                SplitStates.SPCHECK_BRANCHPLAYER:
                    regfile_ra2 = d13 //checks R13 currplayer
                    if(regfile_rd2[0]){
                        game_fsm.d = SplitStates.SPCHECK_BRANCHP2LAVAIL
                    }
                    else{
                        game_fsm.d = SplitStates.SPCHECK_BRANCHP1LAVAIL
                    }
                
                // P1 turn
                SplitStates.SPCHECK_BRANCHP1LAVAIL: // check availability of P1 left hand
                regfile_ra2 = d4
                if(regfile_rd2[0]){
                    game_fsm.d = SplitStates.SPCHECK_EVALUATEHANDCOUNT1
                    }
                else{
                    game_fsm.d = SplitStates.SPCHECK_EVALUATEHANDCOUNT2
                    }
                
                SplitStates.SPCHECK_EVALUATEHANDCOUNT1: // save that p1left exists
                    // implement signals
                    alufn = b011100 //"B"
                    bsel = b10
                    regfile_we = b1
                    regfile_wa = b1001
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_UPDATET2P1LS
                
                SplitStates.SPCHECK_UPDATET2P1LS: // save number of fingers on p1left if the hand still has fingers
                    alufn = b011010 //"A"
                    asel = b00
                    regfile_ra1 = b0000
                    regfile_we = b1
                    regfile_wa = b1010
                    game_fsm.d = SplitStates.SPCHECK_BRANCHP1RAVAIL
                
                SplitStates.SPCHECK_EVALUATEHANDCOUNT2: // save that no hands with fingers have been found yet
                    // implement signals
                    alufn = b011100 //"B"
                    bsel = b01
                    regfile_we = b1
                    regfile_wa = b1001
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_BRANCHP1RAVAIL
                
                SplitStates.SPCHECK_BRANCHP1RAVAIL: // check availability of P1 Right hand
                regfile_ra2 = d5
                if(regfile_rd2[0]){
                    game_fsm.d = SplitStates.SPCHECK_EVALUATEHANDCOUNT3
                    }
                else{
                    game_fsm.d = SplitStates.SPCHECK_BRANCHNOHANDS1
                    } 
                
                SplitStates.SPCHECK_EVALUATEHANDCOUNT3: // save if there is more/less than 1 hand
                    alufn = b010110 //"XOR" 
                    asel = b00
                    bsel = b10
                    regfile_ra1 = b1001
                    regfile_we = b1
                    regfile_wa = b1001
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_UPDATET2P1RS
                
                SplitStates.SPCHECK_UPDATET2P1RS: // save number of fingers on p1right if the hand still has fingers
                    alufn = b011010 //"A"
                    asel = b00
                    regfile_ra1 = b0001
                    regfile_we = b1
                    regfile_wa = b1010
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_BRANCHNOHANDS1
                
                    
                SplitStates.SPCHECK_BRANCHNOHANDS1: // check if player has 1 hand
                regfile_ra2 = d9
                if(regfile_rd2[0]){
                    game_fsm.d = SplitStates.SPCHECK_CHECKHANDSCORE1
                    }
                else{
                    game_fsm.d = SplitStates.SPCHECK_INVALID
                    } 
                
                SplitStates.SPCHECK_CHECKHANDSCORE1: // check if hand has less than or equal to 1 finger
                    alufn = b110111 //"CMPLE"             
                    asel = b00
                    bsel = b10
                    regfile_ra1 = b1010
                    regfile_we = b1
                    regfile_wa = b1010
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_BRANCHVALIDHANDS1
                
                SplitStates.SPCHECK_BRANCHVALIDHANDS1: // branch according to previous state
                regfile_ra2 = d10
                if(regfile_rd2[0]){
                    game_fsm.d = SplitStates.SPCHECK_INVALID
                    }
                else{
                    game_fsm.d = SplitStates.SPCHECK_P1SPLITVALID
                    }
                
                // P2 turn
                
                SplitStates.SPCHECK_BRANCHP2LAVAIL: // check availability of P2 left hand
                regfile_ra2 = d6
                if(regfile_rd2[0]){
                    game_fsm.d = SplitStates.SPCHECK_EVALUATEHANDCOUNT4
                    }
                else{
                    game_fsm.d = SplitStates.SPCHECK_EVALUATEHANDCOUNT5
                    }
                
                SplitStates.SPCHECK_EVALUATEHANDCOUNT4: // save that p2left exists
                    // implement signals
                    alufn = b011100 //"B"
                    bsel = b10
                    regfile_we = b1
                    regfile_wa = b1001
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_UPDATET2P2LS
                
                SplitStates.SPCHECK_UPDATET2P2LS: // save number of fingers on p2left if the hand still has fingers
                    alufn = b011010 //"A"
                    asel = b00
                    regfile_ra1 = b0010
                    regfile_we = b1
                    regfile_wa = b1010
                    game_fsm.d = SplitStates.SPCHECK_BRANCHP2RAVAIL
                
                SplitStates.SPCHECK_EVALUATEHANDCOUNT5: // save that no hands with fingers have been found yet
                    // implement signals
                    alufn = b011100 //"B"
                    bsel = b01
                    regfile_we = b1
                    regfile_wa = b1001
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_BRANCHP2RAVAIL
                
                SplitStates.SPCHECK_BRANCHP2RAVAIL: // check availability of P1 Right hand
                regfile_ra2 = d7
                if(regfile_rd2[0]){
                    game_fsm.d = SplitStates.SPCHECK_EVALUATEHANDCOUNT6
                    }
                else{
                    game_fsm.d = SplitStates.SPCHECK_BRANCHNOHANDS2
                    } 
                
                SplitStates.SPCHECK_EVALUATEHANDCOUNT6: // indicate if there is more/less than 1 hand
                    alufn = b010110 //"XOR" 
                    asel = b00
                    bsel = b10
                    regfile_ra1 = b1001
                    regfile_we = b1
                    regfile_wa = b1001
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_UPDATET2P2RS
                
                SplitStates.SPCHECK_UPDATET2P2RS: // save number of fingers on p1right if the hand still has fingers
                    alufn = b011010 //"A"
                    asel = b00
                    regfile_ra1 = b0011
                    regfile_we = b1
                    regfile_wa = b1010
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_BRANCHNOHANDS2
                
                    
                SplitStates.SPCHECK_BRANCHNOHANDS2: // check if player has 1 hand
                regfile_ra2 = d9
                if(regfile_rd2[0]){
                    game_fsm.d = SplitStates.SPCHECK_CHECKHANDSCORE2
                    }
                else{
                    game_fsm.d = SplitStates.SPCHECK_INVALID
                    } 
                
                SplitStates.SPCHECK_CHECKHANDSCORE2: // check if hand has less than or equal to 1 finger
                    alufn = b110111 //"CMPLE"             
                    asel = b00
                    bsel = b10
                    regfile_ra1 = b1010
                    regfile_we = b1
                    regfile_wa = b1010
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_BRANCHVALIDHANDS2
                
                SplitStates.SPCHECK_BRANCHVALIDHANDS2: // branch according to previous state
                regfile_ra2 = d10
                if(regfile_rd2[0]){
                    game_fsm.d = SplitStates.SPCHECK_INVALID
                    }
                else{
                    game_fsm.d = SplitStates.SPCHECK_P2SPLITVALID
                    }
                
                // adjust outputs for testing and debugging, should link to next part of fsm in final
                SplitStates.SPCHECK_INVALID:
                    
                    //set P1L score as 10
                    alufn = b011010 //"A"             
                    asel = b11 
                    regfile_we = b1
                    regfile_wa = b0000
                    wdsel = b00
                    
                    game_fsm.d = SplitStates.SPCHECK_INVALID
                
                SplitStates.SPCHECK_P1SPLITVALID:
                    //set P1L score as 5
                    alufn = b011010 //"A"             
                    asel = b10 
                    regfile_we = b1
                    regfile_wa = b0000
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_P1SPLITVALID
                
                SplitStates.SPCHECK_P2SPLITVALID:
                    //set P2L score as 5
                    alufn = b011010 //"A"             
                    asel = b10 
                    regfile_we = b1
                    regfile_wa = b0010
                    wdsel = b00
                    game_fsm.d = SplitStates.SPCHECK_P2SPLITVALID
                
                                                
            }
        }
        
    }
}



























































































