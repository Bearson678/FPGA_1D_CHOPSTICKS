// barebones of a fsm, if you are doing timer stuff feel free to edit the increase a bit, Im not sure what i should add to make it work :(
// This is the main file you will be editing for testing FSM modules
module chopsticks_fsm (
    input clk,  // clock
    input rst,  // reset
    input decrease_timer,
    input regfile_rd2[32],
    input p1l_button,
    input p1r_button,
    input p2r_button,
    input p2l_button,
    input p1split,
    input p2split,
    
    output alufn[6],
    output asel[2],
    output bsel[2],
    output wdsel[2],
    output regfile_wa[4],
    output regfile_ra1[4],
    output regfile_ra2[4],
    output regfile_we,
    output debug[4]
) {
    //use this to list the states you are testing for your module
    enum ChopSticksStates{
        //IMPLEMENTING RESET BEFORE THE NEXT TURN
        
        
        ATCHECK_START, // for testing purposes, to remove and connect previous state to next state
        
        // reset of all temp regs
        ATCHECK_CHECKLEGAL1, // check if there is a legal input for first option
        ATCHECK_BRANCHLEGAL1, // branch legal/not legal
        ATCHECK_CHECKLEGAL2, // check if there is a legal input for second option
        ATCHECK_BRANCHLEGAL2, // branch legal/not legal
        
        // to be removed and connect to respective modules
        ATCHECK_LEGAL,
        ATCHECK_ILLEGAL
       
    }
    
    // stores the states in a dff
    .clk(clk){
        .rst(rst){
    dff chopsticks_fsm[$width(ChopSticksStates)](#INIT(ChopSticksStates.ATCHECK_START))
        }
    }
    always {
        //default control signal setings
        alufn = 0
        asel = 0
        bsel = 0
        wdsel = 0
        regfile_wa = d9
        regfile_we = 0
        regfile_ra1 = d0
        regfile_ra2 = d0
        debug = b0000
        
        chopsticks_fsm.d = chopsticks_fsm.q
        if(rst){
            chopsticks_fsm.d = ChopSticksStates.ATCHECK_START
        }
        else{
            //this is where you start coding out your states
            case(chopsticks_fsm.q){
                ChopSticksStates.ATCHECK_START: // when split button is pressed (temp for testing, to be removed when connecting)
                    if(p1split){
                        chopsticks_fsm.d = ChopSticksStates.ATCHECK_CHECKLEGAL1
                        }
                
                ChopSticksStates.ATCHECK_CHECKLEGAL1: // check if there is a legal input for first option(temp2), store result in temp4
                regfile_ra2 = d10
                    if(regfile_rd2 == d0){
                        chopsticks_fsm.d = ChopSticksStates.ATCHECK_ILLEGAL
                    } 
                    else{
                        chopsticks_fsm.d = ChopSticksStates.ATCHECK_CHECKLEGAL2
                    }                    
                  
                                    
                ChopSticksStates.ATCHECK_CHECKLEGAL2: // check if there is a legal input for second option (temp3), store result in temp4
                    regfile_ra2 = d11
                    if(regfile_rd2 == d0){
                        chopsticks_fsm.d = ChopSticksStates.ATCHECK_ILLEGAL
                    } 
                    else{
                        chopsticks_fsm.d = ChopSticksStates.ATCHECK_LEGAL
                    }
                    
                // used for testing, to be removed and connect to respective states    
                ChopSticksStates.ATCHECK_LEGAL: // assign temp4 to be 1 if legal
                    alufn = b011100 //"B"
                    bsel = b10
                    regfile_we = b1
                    regfile_wa = d12
                    wdsel = b00

                    chopsticks_fsm.d = ChopSticksStates.ATCHECK_LEGAL 
                    
                ChopSticksStates.ATCHECK_ILLEGAL: // assign temp4 to be 2 if illegal
                    alufn = b011100 //"B"
                    bsel = b11
                    regfile_we = b1
                    regfile_wa = d12
                    wdsel = b00
                    chopsticks_fsm.d = ChopSticksStates.ATCHECK_ILLEGAL
                    
               
                
                
                                                
            }
        }
        
    }
}